package types

import (
	"runtime"
	"testing"

	"code.cloudfoundry.org/bytefmt"
	"github.com/spacemeshos/go-spacemesh/common/util"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/spacemeshos/go-spacemesh/codec"
	"github.com/spacemeshos/go-spacemesh/signing"
)

func TestProposal_IDSize(t *testing.T) {
	var id ProposalID
	assert.Len(t, id.Bytes(), ProposalIDSize)
}

func TestProposal_Initialize(t *testing.T) {
	p := Proposal{
		InnerProposal: InnerProposal{
			Ballot: *RandomBallot(),
			TxIDs:  []TransactionID{RandomTransactionID(), RandomTransactionID()},
		},
	}
	signer := signing.NewEdSigner()
	p.Ballot.Signature = signer.Sign(p.Ballot.Bytes())
	p.Signature = signer.Sign(p.Bytes())
	assert.NoError(t, p.Initialize())
	assert.NotEqual(t, EmptyProposalID, p.ID())

	err := p.Initialize()
	assert.EqualError(t, err, "proposal already initialized")
}

func TestProposal_Initialize_BadSignature(t *testing.T) {
	p := Proposal{
		InnerProposal: InnerProposal{
			Ballot: *RandomBallot(),
			TxIDs:  []TransactionID{RandomTransactionID(), RandomTransactionID()},
		},
	}
	signer := signing.NewEdSigner()
	p.Ballot.Signature = signer.Sign(p.Ballot.Bytes())
	p.Signature = signer.Sign(p.Bytes())[1:]
	err := p.Initialize()
	assert.EqualError(t, err, "proposal extract key: ed25519: bad signature format")
}

func TestProposal_Initialize_InconsistentBallot(t *testing.T) {
	p := Proposal{
		InnerProposal: InnerProposal{
			Ballot: *RandomBallot(),
			TxIDs:  []TransactionID{RandomTransactionID(), RandomTransactionID()},
		},
	}
	p.Ballot.Signature = signing.NewEdSigner().Sign(p.Ballot.Bytes())
	p.Signature = signing.NewEdSigner().Sign(p.Bytes())
	err := p.Initialize()
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "inconsistent smesher in proposal")
}

func TestDBProposal(t *testing.T) {
	layer := NewLayerID(100)
	p := GenLayerProposal(layer, RandomTXSet(199))
	assert.Equal(t, layer, p.LayerIndex)
	assert.NotEqual(t, p.ID(), EmptyProposalID)
	assert.NotNil(t, p.SmesherID())
	dbb := &DBProposal{
		ID:         p.ID(),
		BallotID:   p.Ballot.ID(),
		LayerIndex: p.LayerIndex,
		TxIDs:      p.TxIDs,
		Signature:  p.Signature,
	}
	got := dbb.ToProposal(&p.Ballot)
	assert.Equal(t, p, got)

	b := (*Block)(p)
	gotB := dbb.ToBlock()
	assert.NotEqual(t, b, gotB)
	assert.Equal(t, b.ID(), gotB.ID())
	assert.Equal(t, b.LayerIndex, gotB.LayerIndex)
	assert.Equal(t, b.TxIDs, gotB.TxIDs)
	assert.Nil(t, gotB.SmesherID())
}

func Test_decodeMalformedProposal1(t *testing.T) {
	malformedProposal := "0000000cfb49fc5e9d4835f7318925b082a9aaa0b82e00329708ee6a9ca167fd75b566e300000001000000402c849c129cc00631e39c5db6847730e8d8a718274ef316c969935d20aa3ae776ef077a16b00ce994b9c2a48c8bcf2444ca550553ba127f61c0ded6e9b5cf9c0e000000000c640ee3b301d3a7e01ba5365a727499308e213700000000000000010c640ee3b301d3a7e01ba5365a727499308e213700000000000000000000000100000032ea560c89006a8b497efa5dcbd30239efa87e433ef15c5785dd077efafc8c8e0087b79cb26b6aa6c8beb3467f4fd31514dc6f91f4a3dcf17c544f4f222a480f45415ce2ec84bf8024d2bc699c18f56dd92e51605757e89e2168bb13bdad47294370fb418d64462d49c736cd720be78ba098957d120df555beec6d16941844b6d1a029868d19eb2d02fb69ed50c84451483fa90f09f1203fd9aa8b160f105a94f1ef2047082020ba10d788940c955d9adcc44cc11ce0b8af3971212907b416810d0a7d8380d07ad6df8a89a42da6ed0af1b5c1af71319dbe44b95a961bb97a632383c8c2b7ff108fcc179f759b8468d14d74e510d6b41077e89c82a84e8421f49a6bcee152422c2f7ff275c92a22c7d4ec510ed23f3db6490fa9348467e47fab7faab97595330af05732280b5a9fee14e6a2fcebc15fbfd63ae9ad0acf371c61d75c45b31b32589a98d28047193424b78d3b9501f9492321deda2bdcdc0ece5cd774b1465196381d917044c0159184578d8a21de1b9e6d4a11e6bcbb4f49aa7ef2a24b27e863a1a45e4d80a3f6dcb08eef715f5609e5bc3e46ac7ee10527027cf6be8e818d83bd78d8accc499548da6bdf4013d456efbb4fd5766c61d599009d746ebae87a83ef834fbfe06b136fe152a7faea811e398de4e6918963ad540a084cf3bbdef5383dceca0470a9e8a5f0ed14594efda4bf5b17c5e48d2437e127ad536134f256c4b01c15b58c6b912b915f212d6f8bbf45ed4d986e1f57a5e53857f4deee359c56001b49b1211f6638ad7c73d391deefa78b6d29ff7e73f796142febda9d9f48be12d9c6b915ea9e6a209d0c948a9f128e241eb7f5b36b92369a611c192a18c3944f990c0bed3d914b283718e57ea90acf12e328cfc22d3c36203006a6c8664db5a4524acb28316006f77b35b82b415f2d50379682d66dd119e35fcf7fe5d3d81b27744302997120ee650526e3f0543adc3f712c0a9d98d6242dcae124d08f6e4593e35cfd8fa2c26e3de9d2b24493380e34d57e93e58e9a479019fd52e7c952073003e67e191d9c6055e3bd258d96ded4afca2abe550cad9e03777a832453b07977aa72cfa38f3fc752957638e693d8f679f750e970d06161ac0749e100863944cbfa5a295fcafcbf5fcb18b41017249c339839b9c8d8d20bca194a2adf07c5e2fa0061121878a04398f983ea2eae78b05014226176c7b65291d1c2a3c44393d185d7f07e24a31b011d59aa59d0a40a3c69c9d6ad0ffd5108d909d0bcc5a580b6458bb8b627611cefa3f43b92cf1b09fd95980104d3adc1d52eaed396cc90c143228e597549358b6ec071d9c77b51afe3f3d731219b0da088ab2a55219473e3bcd299d9a8d342ed94038c3a5c7023c18cfc2a33783a846911e47bf67990e5be635da94065ec58b04dbd2011176b006a6cd1212c009abac09e8c58d7b7db09cd91ef1ca05450c80233453d8e38d688c4f5dff447fcb27388562139ae6d9713c4319281663b980603c601f168e31dcbe775b3ce185204c5e7d277d0d92e617626a74f82dd51564d9f5a3df18c378ee2c4c12037a77a8133e638cae396a4451c482a996b49f22cad0517f9b317a0bcb2ff8be89347a914a884d6d533688dd344f95cfef1157aa1b0b4769354697066c612ec440d2de9b2786e4f2049b56790f6d514ca10983675144b52d8b6d52f038041e9efd3b384284c9c9bb6b84dd2c0364e1709e904af6e85ba3b299446a48eda3a5fc1415ffef0269b06b43381fb49fc5e9d4835f7318925b082a9aaa0b82e00329708ee6a9ca167fd75b566e3f7c9122b9ffad57548853a6a447c251d6b63ba6df97a616eeaed61f94e704dfac2660fb93073164a9b194caa266c66cfe5f9ee1c2815b311fbd3b7a3ed4392039873888e4ded0ee19b051683000b7905de1c94885350319d202f16ba90ca3c840748333c41bad3e950c6b4d151b39934eac896147bd8b5d4672b7200a305f74dce56e49ef6d23d2d792d44dfefca7107b2975a1e8af2a4d1413d24bc604fef1028396465faab9dd279cca969d5d657a510df1ed95ff049dc85002ce78522fa8c3c46f301e00ed5ad4b765223614ab58d36e60615dd1fb7b7c6dd86947bc82f4c75627b50a5cb484dbc0fe44ae0da3a4dd9b198d19837e8ef2b06b4bb4272ed716b7faa529499422af51d546b530d7947c0276a2953201534cf8ebd5a3f9900771546eef361ff6e22edc8d7ae767538b2cf1c5f0062bad689e26ea8ee68dea1ad0000000000000020aeebad4a796fcc2e15dc4c6061b45ed9b373f26adfc798ca7d2d8cc58182718e00000040773d4f64c853f973fc05a3be18e50b556fab3569199b0a752662025335ad53f7434f3fe526af247e17f6722291f78f29d3220281ef745d549ac56091bd959f04"
	var p Proposal

	printMemUsage(t)
	err := codec.Decode(util.Hex2Bytes(malformedProposal), &p)
	printMemUsage(t)

	require.Error(t, err)
}

func Test_decodeMalformedProposal2(t *testing.T) {
	malformedProposal := "0000000c2adf07c5e2fa0061121878a04398f983ea2eae78b05014226176c7b65291d1c20000000000000040fef759398afe57ad10225ffdc1f1447159e5ad7dfadbd92a033ad1600e64c6e85b9011ff840dd7394594b56b890a6616a30a6446255f3005a6bbd9497dc03d02000000000c640ee3b301d3a7e01ba5365a727499308e213700000000000000010c640ee3b301d3a7e01ba5365a727499308e213700000000000000000000000100000032ea560c89006a8b497efa5dcbd30239efa87e433ef15c5785dd077efafc8c8e0087b79cb26b6aa6c8beb3467f4fd31514dc6f91f4a3dcf17c544f4f222a480f45415ce2ec84bf8024d2bc699c18f56dd92e51605757e89e2168bb13bdad47294370fb418d64462d49c736cd720be78ba098957d120df555beec6d16941844b6d1a029868d19eb2d02fb69ed50c84451483fa90f09f1203fd9aa8b160f105a94f1ef2047082020ba10d788940c955d9adcc44cc11ce0b8af3971212907b416810d0a7d8380d07ad6df8a89a42da6ed0af1b5c1af71319dbe44b95a961bb97a632383c8c2b7ff108fcc179f759b8468d14d74e510d6b41077e89c82a84e8421f49a6bcee152422c2f7ff275c92a22c7d4ec510ed23f3db6490fa9348467e47fab7faab97595330af05732280b5a9fee14e6a2fcebc15fbfd63ae9ad0acf371c61d75c45b31b32589a98d28047193424b78d3b9501f9492321deda2bdcdc0ece5cd774b1465196381d917044c0159184578d8a21de1b9e6d4a11e6bcbb4f49aa7ef2a24b27e863a1a45e4d80a3f6dcb08eef715f5609e5bc3e46ac7ee10527027cf6be8e818d83bd78d8accc499548da6bdf4013d456efbb4fd5766c61d599009d746ebae87a83ef834fbfe06b136fe152a7faea811e398de4e6918963ad540a084cf3bbdef5383dceca0470a9e8a5f0ed14594efda4bf5b17c5e48d2437e127ad536134f256c4b01c15b58c6b912b915f212d6f8bbf45ed4d986e1f57a5e53857f4deee359c56001b49b1211f6638ad7c73d391deefa78b6d29ff7e73f796142febda9d9f48be12d9c6b915ea9e6a209d0c948a9f128e241eb7f5b36b92369a611c192a18c3944f990c0bed3d914b283718e57ea90acf12e328cfc22d3c36203006a6c8664db5a4524acb28316006f77b35b82b415f2d50379682d66dd119e35fcf7fe5d3d81b27744302997120ee650526e3f0543adc3f712c0a9d98d6242dcae124d08f6e4593e35cfd8fa2c26e3de9d2b24493380e34d57e93e58e9a479019fd52e7c952073003e67e191d9c6055e3bd258d96ded4afca2abe550cad9e03777a832453b07977aa72cfa38f3fc752957638e693d8f679f750e970d06161ac0749e100863944cbfa5a295fcafcbf5fcb18b41017249c339839b9c8d8d20bca194a2adf07c5e2fa0061121878a04398f983ea2eae78b05014226176c7b65291d1c2a3c44393d185d7f07e24a31b011d59aa59d0a40a3c69c9d6ad0ffd5108d909d0bcc5a580b6458bb8b627611cefa3f43b92cf1b09fd95980104d3adc1d52eaed396cc90c143228e597549358b6ec071d9c77b51afe3f3d731219b0da088ab2a55219473e3bcd299d9a8d342ed94038c3a5c7023c18cfc2a33783a846911e47bf67990e5be635da94065ec58b04dbd2011176b006a6cd1212c009abac09e8c58d7b7db09cd91ef1ca05450c80233453d8e38d688c4f5dff447fcb27388562139ae6d9713c4319281663b980603c601f168e31dcbe775b3ce185204c5e7d277d0d92e617626a74f82dd51564d9f5a3df18c378ee2c4c12037a77a8133e638cae396a4451c482a996b49f22cad0517f9b317a0bcb2ff8be89347a914a884d6d533688dd344f95cfef1157aa1b0b4769354697066c612ec440d2de9b2786e4f2049b56790f6d514ca10983675144b52d8b6d52f038041e9efd3b384284c9c9bb6b84dd2c0364e1709e904af6e85ba3b299446a48eda3a5fc1415ffef0269b06b43381fb49fc5e9d4835f7318925b082a9aaa0b82e00329708ee6a9ca167fd75b566e3f7c9122b9ffad57548853a6a447c251d6b63ba6df97a616eeaed61f94e704dfac2660fb93073164a9b194caa266c66cfe5f9ee1c2815b311fbd3b7a3ed4392039873888e4ded0ee19b051683000b7905de1c94885350319d202f16ba90ca3c840748333c41bad3e950c6b4d151b39934eac896147bd8b5d4672b7200a305f74dce56e49ef6d23d2d792d44dfefca7107b2975a1e8af2a4d1413d24bc604fef1028396465faab9dd279cca969d5d657a510df1ed95ff049dc85002ce78522fa8c3c46f301e00ed5ad4b765223614ab58d36e60615dd1fb7b7c6dd86947bc82f4c75627b50a5cb484dbc0fe44ae0da3a4dd9b198d19837e8ef2b06b4bb4272ed716b7faa529499422af51d546b530d7947c0276a2953201534cf8ebd5a3f9900771546eef361ff6e22edc8d7ae767538b2cf1c5f0062bad689e26ea8ee68dea1ad0000000000000020aeebad4a796fcc2e15dc4c6061b45ed9b373f26adfc798ca7d2d8cc58182718e00000040de304f362ecb651bada64c2a61cafc46eed49121f24eee5544764e80085d003482183d5b36226d9d6f7ee71a31ec6e3a1ad93fb23972a73156cd03b91e1e0e05"
	var p Proposal

	printMemUsage(t)
	err := codec.Decode(util.Hex2Bytes(malformedProposal), &p)
	printMemUsage(t)

	require.Error(t, err)
}

func Test_decodeValidProposal(t *testing.T) {
	validProposal := "67d6595258395c394bb0eead8c5c83ba6d06aa556d54591fd05c394ced2efb120000000000000040ec8f45e92744e9ec9a47db4376c9ddefef6a401a061c52a9af46a4f5280bd0c7bc8a3d54f89de6d5378b51329b6fda43beaf353d1a4f1fd97c542a55d218d30b7a68f37b1a1903c9b9d428c3bdb0a8188c6b7d880000000000000001bab7a6d8efcb406d121199f93cc7997cf9a97ea80000000000000000000000000000000000000000000000000000000100000032585cfde52e7eec20deececb527b4b6b9beb1c3251cd4ee229f9149227cb8e4e3014a4935078985d33f9c3180012ce1dadf1f95cba6d110b7d7f1b028d0955d171cd5f01063bc53e89da0fe3c49b34ea0cd94ca2b963229c07c982126bf92c7d83950ced0e94ce0a5de7483e68fdf2105415a8e0f6e9184ab6aa499bfc5427805422639a43570839556ccc66b311d8c3476fcc53535a654f2f70eb7bcfb227c8b25c42df95ce8f0cb819235e6bdc3f6febd03939c3110764ac61e22f9d3853cd80c4823ebb4ba513d7c2d8e4260142701c1a9a5ea31df412b5823bc834cb5a904e21083fdfe2d998f017fb07612ba76f03800e468d98bbbc845b075caeef461a6960f9d2daab477b3e9806c91c7c64ce8f76abcafddd6dd72e9da424f228584cf80b738c741f1902f5f2ea718929f48fa8f52de26d27be10b3ecaaaf16ab4bfcea4b730bc9523dab230ff179454a2618e109e6b9b7704fe29ffb48f962c576f5950834c1b07b8c7a297e9d3360f8e6c8fba1d708d9d5ce396e86e595435d9ae3bd558e7d124436dd7a1a5a797bc693a381ef2bc66ab75fde012ee34be68c811b78b31c9c60a3f3b28cf604c76b8a1cf1403af704a28f964fb1ffb5b752107f6c220e4179447ffbd7f00495b0b6c5b0d47cd2114125bcfd02e58bde9157edebd70f8088b87afe995fb2937d1c80d7d7050753de92fcc1e51dabd179b48bddf0dedc6b3fb31053563c2fef5d5b878fac3c16e61871b2c8b8d049d859f1d876c3ecf11a30298c60779cdd6d74d45829876322e2fd0fe4a6bdc4ca7a6b43db995da108b9caad976c747fd12666d7560afe98406d39bda789f3a9d8b77b414fb76fb8e638b7c473b87f3fd5386d872344db0f5aa99f72f60bb04ac9c19ee02d7fc748aab25a9d6fd14def2435dcb8f82befbd770517e2b4a93cb6772c923a32dcfcf1d5722efebef026c970478f50b77dbc814b2164e98caf616308bfac273ceae2109ebf2ab486983c028bc980159246b2fada3228e818efc82487c99c669bf6b9b362e6d5c6e5d870c7f565b02c039060e025841032bebdc2ed16610b2a9485268e9b2c7000befeee25d0cbe5138136520403f4a88c51ab76a854d879848125cd7c5b719916d9844414bd3c939bdabea5c9c58134cbc939ed6539f02c849b5ac4ecd486727ac2a1d7a53161af3a662d6cb18b25df61e673bc3ed956fa829c2625a4006ff9273d31c185d212b6dc6a36dd7c4a60918c55be644f7f4c86a54f9138d75bc315415a487a2b90f7cfbfed9733ac0a7230d6be534496614b4970924d8ad12c24767118ee1aeac22857602a1e5136d0b80b532565eb09da9d058071b27a3683288b5a0839f4c59ab539ad1cd8babbaa63ff4576f02ab6ac4d4b1cd37ad11d746cd3bcd0689ce8415d8e436245a7b28948494c7c368bd0baba350485601210267d6595258395c394bb0eead8c5c83ba6d06aa556d54591fd05c394ced2efb120326ad8c431d37c69aeea311b4a327c89b6947bd0b2c2ddbed35badc59a141a267257f0d5dfd9f46c44a641546d630f4e004333afe45540c4f3eae8a79f51c50466d466034a021dfb107fd6c2564d5419d66eb4f5180048845de7706c3238500752e7378a2a101d0cdf4238f4d5cb4bb3f57df12d5ec12954f7ddf62f18e0dfa116558d528a0f4ff26d35a42de7818e54452f4bf4aef8da099a87b60d19f1e9f9c2a4ab98ba7806c551fe0ab35b88d4be0fb54c359058839455ce41af8b401176bdbdea48f5894a07d202e09afdb17fc96339b3c8e6588b071efb1aaca703b0f4adb340b6845c466b03b6aa08fe0c65fdf785714a83561ff4bc310082a5dd76f1bb77219f6c60d4d885ce00cffa7fdb2129342189a50027e0cbbf777de527cf6f93c391c105a93d1599c66132f42b3b0c2bb1e16efcdca17b55f5e76246a1028a53b06c78014855fa1626be0d5c9a04f079cc03eec29f337d6aa2ac97ee6a83ccf90b22c6050372afdf571a9ba1fc7496c15adc71c39b740e839585d02de8ff2ed4b04bc7f7d1fb5fa1cbe9ec505a0052d001c614c21fd2ba8e452dc13da56753fe1a4d23aee5c6bd0b85efeb9b757f814846c6e333e5076a110b0cec5780fbf05725ca9198915e926d06bddf979c3273f8de037f2087d01eda9f02cde94c4d4f745d6982c958fd64b71d543b11273f1d2a50d63934c9d121d803944f0fcbc87451f02fa256df24cdb26d6ac1cb583be4251205ac215bc144c3624165b5f3556aeebad4a796fcc2e15dc4c6061b45ed9b373f26adfc798ca7d2d8cc58182718e0000000c00000040a159cfcb77fb1ed9adfb99c3f13db50411a531de2830f0e07c0af3ceb2bf7074eab21634b5a507f3993c5d3dde3576ba650f8318170d7489f1ae26e4ad74510a0000000000000040eef626716b6975e1d2bfafc1b2ff8546006139bc2ca77516818e3e657793a22de1b4699d8c5bc802eecb7ee6d402579c9065b545dba9e94936277fbae4438d0b"
	var p Proposal

	printMemUsage(t)
	err := codec.Decode(util.Hex2Bytes(validProposal), &p)
	printMemUsage(t)

	require.NoError(t, err)
}

func printMemUsage(t *testing.T) {
	var m runtime.MemStats
	runtime.ReadMemStats(&m)

	t.Logf("Total cumulative alloc: %v", bytefmt.ByteSize(m.TotalAlloc))
}
